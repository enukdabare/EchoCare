import sys
import threading
from collections import deque

def main():
    sys.setrecursionlimit(1 << 25)
    n, m = map(int, sys.stdin.readline().split())
    edges = []
    for _ in range(m):
        u, v, s = map(int, sys.stdin.readline().split())
        edges.append((s, u-1, v-1))
    
    edges_sorted = sorted(edges, key=lambda x: x[0])
    res = []
    
    for i in range(m):
        threshold = edges_sorted[i][0]
        graph = [[] for _ in range(n)]
        count_edges = 0
        for j in range(i, m):
            s, u, v = edges_sorted[j]
            if s > threshold:
                graph[u].append(v)
                count_edges += 1
        visited = [False] * n
        queue = deque([0])
        visited[0] = True
        while queue:
            node = queue.popleft()
            for neighbor in graph[node]:
                if not visited[neighbor]:
                    visited[neighbor] = True
                    queue.append(neighbor)
        if all(visited):
            res.append(count_edges)
        else:
            res.append(-1)
    
    for r in res:
        print(r)

threading.Thread(target=main).start()
