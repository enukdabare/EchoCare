In a high-precision cognitive neuroscience laboratory, researchers conduct controlled neural stimulation sessions on subjects to study cortical plasticity and synaptic strengthening.

Each session is characterized by:

A start time (when the stimulation begins).
An end time (when the stimulation ends).
A Neural Response Gain value (an integer denoting the overall neuroplastic effect measured by fMRI-based hemodynamic response).
Because of neuro-biological constraints such as refractory periods of neurons, inter-synaptic interference, and overlapping electrical field activations, two stimulation sessions cannot occur simultaneously for the same subject.

Dr. Anirudh, the Principal Investigator (PI) of the lab, greedily selects sessions for himself such that:

His cumulative neural response gain is maximized.
He only conducts sessions that do not overlap in time (since overlapping stimulation leads to data contamination).
The remaining sessions, along with their neural gains, are left for other junior researchers in the lab.

Your task is to determine:

How many sessions remain unassigned to Dr. Anirudh.
The total neural response gain left for the other researchers.
Input Format

The first line contains an integer n, the total number of neural stimulation sessions scheduled for the day.
Each of the next 3n lines describes one stimulation session in the following order:

Start Time of the stimulation (HHMM, 24-hour format, e.g., 0900 = 9:00 AM).
End Time of the stimulation (HHMM, 24-hour format).
Neural Response Gain (an integer representing quantified neuroplasticity measure).
Constraints

0 < n < 10000
Start time < End time (valid session duration).
Neural Response Gain > 0
Sessions are independent, but overlapping ones cannot both be assigned to Dr. Anirudh.
Assume one subject, so no parallel recordings are allowed.
Output Format

Return an array of 2 integers:

The number of sessions left for junior researchers.
The total neural response gain left for them.
Sample Input 0

3
0900
1030
100
1000
1200
500
1030
1200
300
Sample Output 0

2
400



In a distant quantum research facility, scientists are experimenting with chains of entangled particles to transmit ultra fast signals across dimensions. Each particle in the chain has an entanglement coefficient, represented as an integer.

Due to dimensional fluctuations, certain particles may destabilize if their coefficient is too small compared to nearby dominant particles. These unstable particles create quantum gaps, reducing the overall stability of the chain.

The quantum instability of the chain is computed as follows:

For each particle i in the chain, find:

L → the nearest particle to the left of i with a strictly greater coefficient.
R → the nearest particle to the right of i with a strictly greater coefficient.
If both L and R exist, the particle’s contribution to instability is: min(L, R) - coeff[i]
Otherwise, if either L or R is missing, the contribution is 0.
The total quantum instability of the chain is the sum of contributions from all particles.

'Nearest greater' means the closest particle strictly on the left or right with a coefficient greater than the current particle.
Equal values do not count as greater.
Input Format

First line: Integer n - the number of particles in the chain.
Second line: n space separated integers: coeff[0], coeff[1], ..., coeff[n-1] representing the entanglement coefficients of each particle.
Constraints

1 ≤ n ≤ 10^6
1 ≤ coeff[i] ≤ 10^9
Time limit: 2 seconds → Brute force O(n²) will not pass.
Efficient solutions (O(n) or O(n log n)) using monotonic stacks or other optimized methods are recommended.
Output Format

Print a single integer - the total quantum instability of the chain.

Sample Input 0

5
1 2 3 4 5
Sample Output 0

0



A futuristic city has N energy stations connected by M bidirectional cables. Each cable requires a certain amount of energy to activate.

Some stations are designated as power stations. Energy from a power station can reach any station connected directly or indirectly through activated cables.

Your task is to activate a set of cables such that:

Every station is connected (directly or indirectly) to at least one power station.
The total activation cost of cables is minimized.
If it is impossible to connect all stations to at least one power station, output -1.

Input Format

First line: three integers N M K

N = number of stations (1 ≤ N ≤ 2000)
M = number of cables (1 ≤ M ≤ 5000)
K = number of power stations (1 ≤ K ≤ N)
Second line: K space separated integers → indices of the power stations.

Next M lines: u v w meaning a cable connects station u and v with cost w (1 ≤ w ≤ 10^5).

Constraints

-

Output Format

A single integer → minimum total cost to connect all stations to at least one power station.
Output -1 if it is impossible.
Sample Input 0

5 6 2
1 5
1 2 2
2 3 2
3 4 3
4 5 2
2 5 10
1 3 8
Sample Output 0

9


The Intergalactic Federation has built a vast network of planets connected by wormholes. Each wormhole allows travel between two planets at a certain energy cost. You are given an undirected weighted graph where:

Planets are represented as nodes (0 to n-1).
Wormholes are edges with a travel cost w.
A traveler starts at a given planet and wants to explore the galaxy by reaching every other planet at the minimum possible energy cost. However, the traveler has a special advantage: K hyperjump passes.

Each hyperjump pass can be used on one wormhole to reduce its travel cost to 0.

A maximum of K hyperjumps can be used along any route from the starting planet to a destination planet.

Compute the minimum travel cost from the starting planet to every other planet, assuming optimal use of these hyperjump passes. If a planet is unreachable, output -1 for that planet.

Input Format

The first line contains two integers n and m - the number of planets and wormholes.
The next m lines each contain three integers u v w, representing a bidirectional wormhole between planets u and v with travel cost w.
The next line contains an integer start - the starting planet.
The last line contains an integer K - the number of hyperjump passes.
Constraints

1 ≤ n ≤ 10^5 0 ≤ m ≤ 2 × 10^5 0 ≤ u, v < n u ≠ v 0 ≤ w ≤ 10^9 0 ≤ K ≤ 10 0 ≤ start < n

Output Format

Print n space separated integers, where the i th integer is the minimum cost to reach planet i from start using at most K hyperjumps.
If a planet is unreachable, print -1 for that position.
Sample Input 0

8 6
0 1 4
1 2 6
2 3 3
0 4 10
4 5 2
5 6 1
0
1
Sample Output 0

0 0 4 7 0 2 3 -1




The Intergalactic Federation is building a high-tech power grid connecting all its cities. Each city is a node in a graph, and possible connections are edges with construction costs.

The goal is to minimize the total cost while ensuring all cities are connected.

In this advanced version:

Some edges are mandatory. They must be included in the MST.
Some edges are forbidden. They cannot be included in the MST.
If multiple MSTs satisfy these conditions, return the one that is lexicographically smallest when edges are sorted by (min(u,v), max(u,v)).
The graph may have multiple edges between cities, no self-loops, and is guaranteed to be connected after removing forbidden edges.

Include all mandatory edges first.
Skip forbidden edges during MST construction.
Sort edges lexicographically (min(u,v), max(u,v)) to break ties.
Expected complexity: O(m log m) due to sorting and Union-Find operations.
Input Format

First line: n m k f (number of cities, number of edges, mandatory edges count, forbidden edges count)

Next m lines: u v w (edge between u and v with cost w)

Next k lines: u v (mandatory edges)

Next f lines: u v (forbidden edges)

0 ≤ u, v < n, u ≠ v
1 ≤ w ≤ 10^9
Graph is connected after removing forbidden edges.
Constraints

2 ≤ n ≤ 10^5 n-1 ≤ m ≤ 2×10^5 0 ≤ k, f ≤ n 1 ≤ w ≤ 10^9

Output Format

First line: MST total cost

Next n-1 lines: edges in the MST, each as u v (sorted by min(u,v) then max(u,v))

MST must include all mandatory edges.
MST must exclude all forbidden edges.
If no valid MST exists, output -1.
Sample Input 0

5 7 2 1
0 1 2
0 2 3
1 2 3
1 3 6
2 3 4
1 4 5
2 4 7
0 1
2 3
1 3
Sample Output 0

14
0 1
2 3
1 2
1 4


========================================================================

7

You are given a 2D grid representing a vast desert. Some cells contain obelisks of varying heights, while other cells are empty sand.

At sunrise, sunlight comes from the top left corner (northwest) at a 45° angle. Each obelisk casts a shadow diagonally (down-right) that can cover multiple cells depending on its height.

If an obelisk of height h is placed at position (x, y), it casts a shadow on the cells (x+1, y+1), (x+2, y+2), ..., (x+h, y+h) until the grid boundary or until another obelisk blocks the light.

A cell is considered "in shadow" if at least one obelisk's shadow covers it.

If two shadows overlap, the taller obelisk’s shadow dominates beyond the point of overlap.

Compute the total number of cells that remain in shadow after all obelisks cast their shadows.

Input Format

First line: Two integers R and C (number of rows and columns).

Next R lines: Each line contains C integers, where:

0 means empty sand
A positive integer h means there is an obelisk of height h
Constraints

1 ≤ R, C ≤ 1000

0 ≤ h ≤ 10^6

Grid can be large, so an efficient algorithm is required (O(RC) or O(RClog(R*C))).

Brute force shadow expansion from each obelisk will time out.

Output Format

A single integer: the total count of shadowed cells

Sample Input 0

4 4
0 2 0 0
0 0 0 0
0 0 3 0
0 0 0 0
Sample Output 0

4

==============================================================================

A kingdom is built across a river with N islands, connected by M one-way magical bridges. Each bridge has a stability value (a positive integer).

Over time, bridges vanish in order of their stability: weakest bridges vanish first.
When a bridge vanishes, it may disconnect parts of the kingdom.
The King wants to know, for each point in time, what is the minimum number of bridges that must remain active so that every island is still reachable from island 1.

If at some point it becomes impossible for all islands to be reachable from island 1, return -1 for that time.

Input Format

First line: Two integers N and M (number of islands, number of bridges).
Next M lines: Three integers u v s meaning there is a directed bridge from island u to island v with stability s.
Bridges vanish in ascending order of stability.
Constraints

2 ≤ N ≤ 2000
1 ≤ M ≤ 5000
1 ≤ s ≤ 10^9
Graph can be sparse/dense → naive recomputation (BFS/DFS for each removal) will time out. Needs optimization with DSU on reverse edges, strong connectivity, or offline queries.
Output Format

Print M lines, where line i represents the minimum number of bridges still required for connectivity after the first i bridges have vanished.
If connectivity is impossible, print -1.
Sample Input 0

4 5
1 2 2
2 3 3
1 3 5
3 4 4
2 4 6
Sample Output 0

3
2
2
1
-1


==================================================================================

A kingdom is built across a river with N islands, connected by M one-way magical bridges. Each bridge has a stability value (a positive integer).

Over time, bridges vanish in order of their stability: weakest bridges vanish first.
When a bridge vanishes, it may disconnect parts of the kingdom.
The King wants to know, for each point in time, what is the minimum number of bridges that must remain active so that every island is still reachable from island 1.

If at some point it becomes impossible for all islands to be reachable from island 1, return -1 for that time.

Input Format

First line: Two integers N and M (number of islands, number of bridges).
Next M lines: Three integers u v s meaning there is a directed bridge from island u to island v with stability s.
Bridges vanish in ascending order of stability.
Constraints

2 ≤ N ≤ 2000
1 ≤ M ≤ 5000
1 ≤ s ≤ 10^9
Graph can be sparse/dense → naive recomputation (BFS/DFS for each removal) will time out. Needs optimization with DSU on reverse edges, strong connectivity, or offline queries.
Output Format

Print M lines, where line i represents the minimum number of bridges still required for connectivity after the first i bridges have vanished.
If connectivity is impossible, print -1.
Sample Input 0

4 5
1 2 2
2 3 3
1 3 5
3 4 4
2 4 6
Sample Output 0

3
2
2
1
-1
===================================================================================

In a robotics lab, there are N robots, each powered by a battery with a certain charge level. To prepare the robots for a synchronized task, you can reprogram at most K batteries.

Reprogramming a battery allows you to replace its charge with any of its divisors, including 1.
Each battery can be reprogrammed at most once, and you may choose not to reprogram some batteries.
The synchronization efficiency of the robot fleet is defined as the Greatest Common Divisor (GCD) of all battery charges after reprogramming.

Determine the maximum efficiency you can achieve by reprogramming at most K batteries.

Input Format

First line: Two integers N and K
N → number of robots (1 ≤ N ≤ 2 × 10^5)

K → maximum number of reprogramming operations allowed (0 ≤ K ≤ N)

Second line: N space separated integers A[1], A[2], …, A[N]
A[i] → initial charge of the i-th robot’s battery (1 ≤ A[i] ≤ 10^9)

Constraints

1 ≤ N ≤ 2 × 10^5
0 ≤ K ≤ N
1 ≤ A[i] ≤ 10^9
Output Format

A single integer → maximum GCD possible after reprogramming at most K batteries.

Sample Input 0

3 1
6 10 15
Sample Output 0

5

=========================================================================================

The National Emergency Communication Authority is building a secure fiber optic network to connect two major cities, City S and City T. The network consists of N junction points (including S and T) connected by M underground bidirectional cables.

Each cable has a bandwidth capacity (in Gbps), represented by a positive integer weight. For reliability, the authority requires K independent communication routes between the two cities.

These routes must be vertex disjoint (they cannot share any intermediate junctions) to ensure that if one path fails, the others remain operational.

We want to minimize the maximum cable capacity used across all selected paths. In other words, find the smallest integer X such that there exist K vertex disjoint paths from S to T, and every cable on these paths has a capacity ≤ X.

If it is impossible to establish K such vertex disjoint paths, print -1.

Input Format

The first line contains three integers N, M, K - the number of junction points, cables, and required disjoint paths.
The second line contains two integers S, T - the starting city and target city.
The next M lines each contain three integers u, v, w - a cable between junctions u and v with capacity w.
Constraints

1 ≤ N ≤ 10^5 1 ≤ M ≤ 2×10^5 1 ≤ K ≤ N 1 ≤ w ≤ 10^9 1 ≤ S, T ≤ N

The graph is connected.
No self-loops. Multiple edges allowed.
Junctions are numbered 1 to N.
Output Format

Print the minimum bottleneck capacity X.
If it’s impossible to create K vertex-disjoint paths, print -1.
Sample Input 0

4 4 2
1 4
1 2 1
2 3 1
3 4 1
1 3 3
Sample Output 0

1