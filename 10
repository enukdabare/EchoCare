The National Emergency Communication Authority is building a secure fiber optic network to connect two major cities, City S and City T. The network consists of N junction points (including S and T) connected by M underground bidirectional cables.

Each cable has a bandwidth capacity (in Gbps), represented by a positive integer weight. For reliability, the authority requires K independent communication routes between the two cities.

These routes must be vertex disjoint (they cannot share any intermediate junctions) to ensure that if one path fails, the others remain operational.

We want to minimize the maximum cable capacity used across all selected paths. In other words, find the smallest integer X such that there exist K vertex disjoint paths from S to T, and every cable on these paths has a capacity ≤ X.

If it is impossible to establish K such vertex disjoint paths, print -1.

Input Format

    The first line contains three integers N, M, K - the number of junction points, cables, and required disjoint paths.
    The second line contains two integers S, T - the starting city and target city.
    The next M lines each contain three integers u, v, w - a cable between junctions u and v with capacity w.

Constraints

1 ≤ N ≤ 10^5 1 ≤ M ≤ 2×10^5 1 ≤ K ≤ N 1 ≤ w ≤ 10^9 1 ≤ S, T ≤ N

    The graph is connected.
    No self-loops. Multiple edges allowed.
    Junctions are numbered 1 to N.

Output Format

    Print the minimum bottleneck capacity X.
    If it’s impossible to create K vertex-disjoint paths, print -1.

Sample Input 0
4 4 2
1 4
1 2 1
2 3 1
3 4 1
1 3 3

Sample Output 0
1

give me the python code for above question, there are 4 hidden test cases apart from mentioned inputs so make the best
