def countPaths(m, n, memo):
    if n == 1 or m == 1:
        memo[m][n] = 1
        return 1


    if  memo[m][n] == 0:
         memo[m][n] = countPaths(m-1,n, memo) + \
            countPaths(m,n-1, memo)

    return  memo[m][n]


def number_of_paths(m, n):
      
    memo = [[0 for _ in range(n + 1)] for _ in range(m + 1)]
    ans = countPaths(m, n, memo)
    return ans

if __name__ == "__main__":
    n, m = 5,2

    res = number_of_paths(m, n)
    print(res)

You are given a 2D grid of size N × M, where each cell represents the height of a building.

A tower located on a building can send signals in the four cardinal directions: up, down, left, and right.

A signal stops propagating in a direction when it encounters a building with a height strictly greater than the tower. The tower itself counts as covered.

For each cell, determine how many buildings can receive a signal from that tower. Your task is to find the maximum number of buildings that can be covered by a single tower.

Input Format
First line: two integers N and M → grid dimensions (1 ≤ N, M ≤ 1000)
Next N lines: each containing M integers → building heights (1 ≤ Height ≤ 10^9)

Constraints
1 ≤ N,M ≤ 1000
1 ≤ Height ≤ 10^9

Output Format
A single integer → maximum number of buildings covered by any single tower.

make the above code eligible to pass for any type of test case given as mentioned inputs, please give the correct code
