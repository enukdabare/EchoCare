def solve():
    import sys
    input = sys.stdin.read
    data = input().split()

    R, C = int(data[0]), int(data[1])
    grid = []
    idx = 2
    for _ in range(R):
        grid.append(list(map(int, data[idx:idx+C])))
        idx += C

    shadow_count = 0
    diag_shadow = {}  # remaining shadow height along diagonals r-c

    for r in range(R):
        for c in range(C):
            d = r - c
            remaining = diag_shadow.get(d, 0)

            # cell is shadowed if remaining > 0 **or** if there is an obelisk here
            h = grid[r][c]
            if remaining > 0 or h > 0:
                shadow_count += 1

            # update diagonal shadow for future cells
            if remaining > 0:
                diag_shadow[d] = remaining - 1
            else:
                diag_shadow[d] = 0

            if h > 0:
                diag_shadow[d] = max(diag_shadow.get(d, 0), h)

    print(shadow_count)

if __name__ == "__main__":
    solve()